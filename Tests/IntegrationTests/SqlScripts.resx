<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CreateTables" xml:space="preserve">
    <value>
USE [MockedDB];
/****** Object:  Table [dbo].[testMock]    Script Date: 1/2/2021 4:00:48 AM ******/
SET ANSI_NULLS ON;
SET QUOTED_IDENTIFIER ON;
CREATE TABLE [dbo].[testMock](
	[id] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[test] [nchar](10) NULL,
	[decimal] [decimal](18, 0) NULL,
	[float] [float] NULL,
	[datetime] [datetime] NULL,
	[date] [date] NULL,
	[hour] [time](7) NULL,
 CONSTRAINT [PK_testMock] PRIMARY KEY CLUSTERED(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
;
/****** Object:  Table [dbo].[testmockRelation]    Script Date: 1/2/2021 4:00:49 AM ******/
SET ANSI_NULLS ON;
SET QUOTED_IDENTIFIER ON;
CREATE TABLE [dbo].[testmockRelation](
	[id] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[testMock] [uniqueidentifier] NOT NULL,
	[money] [money] NULL,
	[bigint] [bigint] NULL,
 CONSTRAINT [PK_testmockRelation] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UN_testmockRelation] UNIQUE NONCLUSTERED 
(
	[testMock] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
;
ALTER TABLE [dbo].[testMock] ADD  CONSTRAINT [DF_testMock_id]  DEFAULT (newid()) FOR [id];
ALTER TABLE [dbo].[testmockRelation] ADD  CONSTRAINT [DF_testmockRelation_id]  DEFAULT (newid()) FOR [id];
ALTER TABLE [dbo].[testmockRelation]  WITH CHECK ADD  CONSTRAINT [FK_testmockRelation_testMock] FOREIGN KEY([testMock])
REFERENCES [dbo].[testMock] ([id])
ON DELETE CASCADE;
ALTER TABLE [dbo].[testmockRelation] CHECK CONSTRAINT [FK_testmockRelation_testMock];
USE [master];
ALTER DATABASE [MockedDB] SET  READ_WRITE;</value>
  </data>
  <data name="DropAndCreateDatabase" xml:space="preserve">
    <value>DROP DATABASE IF EXISTS [MockedDB];

CREATE DATABASE [MockedDB];

ALTER DATABASE [MockedDB] SET COMPATIBILITY_LEVEL = 140;

ALTER DATABASE [MockedDB] SET ANSI_NULL_DEFAULT OFF;

ALTER DATABASE [MockedDB] SET ANSI_NULLS OFF ;

ALTER DATABASE [MockedDB] SET ANSI_PADDING OFF;
ALTER DATABASE [MockedDB] SET ANSI_WARNINGS OFF;
ALTER DATABASE [MockedDB] SET ARITHABORT OFF;
ALTER DATABASE [MockedDB] SET AUTO_CLOSE OFF;
ALTER DATABASE [MockedDB] SET AUTO_SHRINK OFF;
ALTER DATABASE [MockedDB] SET AUTO_UPDATE_STATISTICS ON;
ALTER DATABASE [MockedDB] SET CURSOR_CLOSE_ON_COMMIT OFF;
ALTER DATABASE [MockedDB] SET CURSOR_DEFAULT  GLOBAL;
ALTER DATABASE [MockedDB] SET CONCAT_NULL_YIELDS_NULL OFF;
ALTER DATABASE [MockedDB] SET NUMERIC_ROUNDABORT OFF;
ALTER DATABASE [MockedDB] SET QUOTED_IDENTIFIER OFF;
ALTER DATABASE [MockedDB] SET RECURSIVE_TRIGGERS OFF;
ALTER DATABASE [MockedDB] SET  DISABLE_BROKER;
ALTER DATABASE [MockedDB] SET AUTO_UPDATE_STATISTICS_ASYNC OFF;
ALTER DATABASE [MockedDB] SET DATE_CORRELATION_OPTIMIZATION OFF;
ALTER DATABASE [MockedDB] SET TRUSTWORTHY OFF;
ALTER DATABASE [MockedDB] SET ALLOW_SNAPSHOT_ISOLATION OFF;
ALTER DATABASE [MockedDB] SET PARAMETERIZATION SIMPLE;
ALTER DATABASE [MockedDB] SET READ_COMMITTED_SNAPSHOT OFF;
ALTER DATABASE [MockedDB] SET HONOR_BROKER_PRIORITY OFF;
ALTER DATABASE [MockedDB] SET RECOVERY FULL;
ALTER DATABASE [MockedDB] SET  MULTI_USER;
ALTER DATABASE [MockedDB] SET PAGE_VERIFY CHECKSUM ;
ALTER DATABASE [MockedDB] SET DB_CHAINING OFF;
ALTER DATABASE [MockedDB] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF );
ALTER DATABASE [MockedDB] SET TARGET_RECOVERY_TIME = 60 SECONDS;
ALTER DATABASE [MockedDB] SET DELAYED_DURABILITY = DISABLED;
ALTER DATABASE [MockedDB] SET QUERY_STORE = OFF;</value>
  </data>
</root>